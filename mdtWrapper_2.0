#!/bin/bash  


#
#
# mdtWrapper v 2.0
#
# - Added ipxe configuration to boostrap from dhcpd directly
# -Added time synchro part
# ipxe boot script added the dispatcher part
# This script is intended to be a wrapper for MDT and tftp server.
# It runs on drbl server
# It manage the CustomSettings ini file , confnet customisation script and finally it write the boot file in tftp directory
# It accepts arguments from DB and is run totally from a daemon that check periodically for machine job
# The script can be run manually, it accepts a minimum of two arguments: 
# - Task ID (as defined in mdt database)
# - Rack position or directly the ip address of client (need to be know)
# - Set the password in confnet script (even if there are no changes in values)
# Changes:
# 2015-06-01 Added support for prolinat GEN 9 (removed acu and added hpss)
# 2015-06 Added sigkill at the end to avoid double execution
# 2015-09-02 Convert the script from centric management to client execution
# 2015-09-14  Added lock file in /home/partimag/MDT/Control to avoid concurrent writing in cs.ini file
# Debug:
# code 299 no clients found on rack position declared
# Author ACS 2015


#Define the web services where to send events
#the form is WEB1, WEB2, WEB(n)
#Add the perl section for each service in 'log' function


PROGNAME=${0##*/}
VERSION="2.0"
CONFNETDIR="/var/www/Confnet"
WEBSERVER="http://10.0.205.203"
DRBL="10.0.205.203"

BASE="/home/partimag"
MDT="$BASE/MDT/Control"
WWWBOOT="/var/www/BOOT"

clientIP="$(ifconfig | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"
#Get and transform mac address uppercase

MAC=$(ifconfig -a |
awk '/^[a-z]/ { iface=$1; mac=$NF ; next }
 /inet addr:/ { print mac }' | head -1)
lowerMAC=${MAC,,}

hwaddr=$(echo $MAC | tr 'a-z' 'A-Z')



clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}




# Usage function
usage () {
log INFO "usage $0 
-a [wintz]
-pos [rack_shelf | client ip]
-g [default gateway]
-h [hostname]
-d [workgroup]
-t [task ID]
-ip [ip address]
-n [netmask]
-p [product key]
-r [customer release(s) (separated by comma, ex release1,release2, etc.) ]
-s [sales order number]
-cus [customer acr]
-iloip [ilo ip address]
-ilonm [ilo netmask]
-radmin [0|1 (default to 0 - not activate ]"
log INFO "IMM and ILO are threated same way"
log INFO "Only 2 parameter are mandatory: -pos [rack_shelf | client IP] -t [task ID]. Note that if taskID is a clonezilla image the wrapper recognize automatically it"
log INFO "The parameter -pos can specify either the rack shelf position and directly the ip client (usefull to install virtual machines)"
log WARN "Note that if the server is a Proliant either a IBM system X, the mirror is automatically built if two disks are found"
check_args
}

# Checks if the mandatory arguments are all here
check_args() {
if valid_ip "$rackPosition" &&  [ "$ERROR" -eq 0 ]; then

Rack="Virtual"
Shelf=$clientIP

else
# Get the rack and shelf variable
Rack=$(echo $rackPosition | awk -F "_" '{print $1}')
Shelf=$(echo $rackPosition | awk -F "_" '{print $2}')
fi




DIRS=$(ls -d "$MDT"/*/)
CLONEZILLA=$(ls -d "$BASE"/*/)
#put here the mandatory params
([[ -z "$taskID"  || -z "$rackPosition" ]] ) && rackPosition="usage"  && log ERROR "Some mandatory parameters missing!!!!!" && log INFO "Type $0 without arguments to grab usage." && exit 1
 valid_ip "$ipaddress" && [ "$ERROR" -ne 0 ] && log ERROR "Ip address not valid" && exit 1
 valid_ip "$netmask" && [ "$ERROR" -ne 0 ] && log ERROR "Netmask not valid" && exit 1
 valid_ip "$gateway" && [ "$ERROR" -ne 0 ] && log ERROR "Gateway not valid" && exit 1


 #check valid TaskID
( [[ ! -d "$MDT/$taskID" ]] && [[ ! -d "$BASE/$taskID" ]] ) && log ERROR "The taskID $taskID is not valid, please check the name. Possible values are for MDT based jobs are:" && log INFO "$(for dir in $DIRS;do basename $dir;done)" && log ERROR "And for clonezilla here you are the images available:" && log INFO "$(for dir in $CLONEZILLA; do if [ -f $dir/disk ]; then basename $dir; fi; done)" && exit 1
}


mask2cidr() {
    nbits=0
    OLDIFS=$IFS
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7;;
            252) let nbits+=6;;
            248) let nbits+=5;;
            240) let nbits+=4;;
            224) let nbits+=3;;
            192) let nbits+=2;;
            128) let nbits+=1;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
    IFS=$OLDIFS
}



syncTime () {
step="Synching server time: "
log INFO "$step current date is $(date)"
log INFO "$step stopping the ntp service..."
service ntp stop
log INFO "$step contacting the 10.0.205.204 server ..."
ntpdate 10.0.205.204
log INFO "$step setting the hardware clock to UTC"
hwclock --systohc --utc


}



destroyDisks () {
log WARN "About to clean all partitions on local disk(s)................."
/usr/sbin/destroyDisks  > /dev/null 2>&1
log INFO "Finish cleaning local disk(s)"
}
# Function to find ip address or mac address of given rack shelf
# should be called with a rack shelf and kind of value you want to find as argument


#function append to cs.ini
append_csini() {
CRUD=$(which crudini)
csini="/home/partimag/MDT/Control/CustomSettings.ini"
#transform netmask in cidr
CIDR=$(mask2cidr $netmask)

DISKSCOUNT=$(lsblk -i -d -n -e 1,11 | wc -l)

log INFO "Setting Rack equal to '$Rack' and Shelf to '$Shelf'"
#check if lockfile exists, if not create one
WAIT=$(( ( RANDOM % 10 )  + 1 ))
log INFO "Generating a random number of seconds ( $WAIT ) to wait to avoid conflicts..."
sleep $WAIT
lockfile="$MDT/lockini"
while [ -f $lockfile ]; do
	log INFO "Another client is locking customsettings.ini, wait for lock to free"
	sleep 1
done
# OK , lock file is gone away create my own
touch $lockfile
#Remove the section if already exists to create a new one
log INFO "Deleting the $hwaddr section if already existing"
$CRUD --del $csini $hwaddr

# Create the csini

setINI="$CRUD --set $csini $hwaddr"
$setINI TaskSequenceID "$taskID"
$setINI TimeZoneName "$wintz"
$setINI ComputerName "$hostname"
$setINI OSDComputerName "$hostname"
$setINI OSDAdapterCount "$NETCOUNT"
$setINI OSDAdapter0EnableWINS TRUE
$setINI OSDAdapter0TCPIPNetBiosOptions 0
$setINI OSDAdapter0MacAddress "$hwaddr"
$setINI SDAdapter0GatewayCostMetrics Automatic
$setINI OSDAdapter0EnableTCPIPFiltering TRUE
$setINI OSDAdapter0EnableLMHosts TRUE
$setINI OSDAdapter0EnableFullDNSRegistration TRUE
$setINI OSDAdapter0EnableDNSRegistration TRUE
$setINI OSDAdapter0Name CTRL
if [[ ! -z "$ipaddress" ]]; then
	$setINI OSDIPADDRESS "$ipaddress"
	$setINI OSDNETMASK "$CIDR"
	$setINI OSDGATEWAY "$gateway"
fi
$setINI OSDTZ "$wintz"
$setINI JoinWorkgroup "$domain"
$setINI CPU "$NUMPROC"
$setINI So "$salesOrder"
$setINI Rack "$Rack"
$setINI Shelf "$Shelf"
$setINI RackShelf "$Rack"_"$Shelf"
$setINI disksCount "$DISKSCOUNT"
$setINI firmware "$MANUFACTURER"
$setINI NetIntCount "$NETCOUNT"
$setINI Data "configuredIP : $ipaddress"
$setINI OSDRadmin $radmin
$setINI SLShareDynamicLogging '\\10.0.205.203\Images\MDT\Logs\Rack'$Rack'_Shelf'$Shelf
$setINI SLShare '\\10.0.205.203\Images\MDT\Logs\Rack'$Rack'_Shelf'$Shelf
if [[ ! -z "$release" ]]; then
#The path to send to MDT include the customer ACR (Windows UNC PATH)
#	findCustACR
	OLDIFS=$IFS
	IFS=','
	releases=''
	for i in $release
	do
		findACRforRelease $i
		releases="$releases$ACR\\$i,"
	done
	IFS=$OLDIFS
	$setINI OSDCustomerRelease "$releases"
	
fi

if [[ ! -z "$productKey" ]]; then

	$setINI OSDPK "$productKey"

fi

#sanitaze the file from blank lines
log INFO "Removing blank lines from $csini"
sed -i '/^\s*$/d' $csini
# Remove the lock so others can edit it
rm $lockfile

}


#Function log for better printing

log() {
local level=${1?}
shift
local code=''
local line="[$(date '+%F %T')] $level: $*"
if [ -t 2 ]
then
case "$level" in
INFO) code=36 ;;
DEBUG) code=30 ;;
WARN) code=33 ;;
ERROR) code=31 ;;
*) code=37 ;;
esac
echo -e "\e[${code}m${line}\e[0m"
else
echo "$line"
fi >&2

#LOG to web services
#Create one section for each web service
REST='{"title":"mdtWrapper | '$rackPosition'","content":"'$line'","userid":"'$(whoami)'","date":"'$(date)'"}'

(
perl - "$REST"  <<'_HERE_'
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};
my $uri = "http://10.0.205.204/SPOT/provisioning/api/events";
my $REST = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'POST', "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
_HERE_
)  >/dev/null  2>&1

if [[ ! -z $rackPosition && ! -z $salesOrder ]]; then createMonitorRecord "$line"; fi

}


SEND () {


perl -e '
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
my $REST = shift;
my $uri = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( "PUT", "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
' "$REST" "$URI"


}

createMonitorRecord () {
 Status="$1"
 subid="$rackPosition"
 subid=$(echo $rackPosition | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
 if [[ "$subid" == "" ]]; then
 subid=$rackPosition
 else
# subid=$rackPosition"_"
 subid=$Rack"_"$Shelf
 fi
 PK="["$salesOrder"]["$subid"]"
 URI="http://10.0.205.204/SPOT/provisioning/api/provisioningnotifications/$PK"

                         REST="{
        \"notifid\":\"$PK\",
        \"hostname\":\"$hostname\",
        \"installationip\":\"vnc://$clientIP\",
        \"configuredip\":\"$ipaddress\",
        \"status\":\"<b>$Status</b>\",
        \"progress\":\"$PROGRESS\",
        \"image\":\"$taskID\",
        \"firmware\":\"$MANUFACTURER\",
        \"ram\":\"$RAM_tot\",
        \"cpu\":\"$NUMPROC\",
        \"diskscount\":\"$DISKCOUNT\",
        \"netintcount\":\"$NETCOUNT\",
        \"model\":\"$MODEL\",
        \"serial\":\"$MACHSERIAL\",
        \"os\":\"Windows\"
        }"
        SEND >/dev/null  2>&1

}

#Create pxe boot files




bootPxe () {

MACSyslinux=01-${lowerMAC//:/-}
MACGrub=01-${lowerMAC}
bootSyslinux="/tftpboot/nbi_img/pxelinux.cfg/$MACSyslinux"
bootGrub="/tftpboot/nbi_img/pxelinux.cfg/$MACGrub"
bootIpxe="$WWWBOOT/$lowerMAC"

syslinuxCFG="default vesamenu.c32
timeout 70
prompt 0
noescape 1
MENU MARGIN 5
MENU BACKGROUND nagra.jpg
# Set the color for unselected menu item and timout message
MENU COLOR UNSEL 7;32;41 #c0000090 #00000000
MENU COLOR TIMEOUT_MSG 7;32;41 #c0000090 #00000000
MENU COLOR TIMEOUT 7;32;41 #c0000090 #00000000
MENU COLOR HELP 7;32;41 #c0000090 #00000000
say **********************************************
say Welcome to WINPE.
say Booting in WINPE
say **********************************************
# Allow client to edit boot parameters
ALLOWOPTIONS 1
# simple menu title
MENU TITLE NAGRAVISION (http://www.nagra.com)
label boot ipxe
MENU DEFAULT
MENU LABEL boot ipxe
kernel ipxe.lkrn
append  dhcp && chain http://10.0.205.203/boot.ipxe
"
grubCFG='
if [ "${grub_platform}" = "efi" ]; then
menuentry "WINPE '$taskID'" --class windows {
chainloader  /ipxe64.efi
}

else

menuentry "WINPE '$taskID'" --class windows {
#set root=http,10.0.129.101
linux16 memdisk iso raw
initrd16   ipxe.iso
}
fi
'

ipxeCFG='
<?php
echo "  item --key r '$taskID'   (r) '$taskID' \n";
echo "  item\n";
echo "  choose --default '$taskID' --timeout 10000 target && goto \${target} || goto cancelled\n";
echo "  :'$taskID'  \n";

echo "  :'$taskID'\n";

echo "  imgfree\n";
switch($_GET["platform"]) {
        case "efi":
                echo "  kernel \${remote-root}\${winpe-files}/wimboot\n";
                echo "  initrd \${remote-root}\${winpe-files}/\${arch}/EFI/Microsoft/Boot/BCD BCD\n";
                echo "  initrd \${remote-root}\${winpe-files}/\${arch}/Boot/boot.sdi boot.sdi\n";
                echo "  initrd -n boot.wim \${remote-root}\${winpe-files}/LiteTouchPE_x64.wim boot.wim\n";
                 echo "  boot || goto failed\n";
                break;
        default:
                echo "  kernel \${remote-root}\${winpe-files}/wimboot\n";
                echo "  initrd \${remote-root}\${winpe-files}/\${arch}/Boot/BCD      BCD\n";
                echo "  initrd \${remote-root}\${winpe-files}/\${arch}/Boot/boot.sdi boot.sdi\n";
                echo "  initrd \${remote-root}\${winpe-files}/LiteTouchPE_x64.wim         boot.wim\n";
                 echo "  boot || goto failed\n";
                break;
}
echo " :failed\n";
$jsonDash = array("status" => "BOOT FAILED!!! May be some files has not been found. Check within a KVM", "progress" => "0");
updateDashboard($jsonDash);


?>
'



log INFO "Copying my bootfiles on Server....."
#Create the boot files
echo "$syslinuxCFG" | sshExe $DRBL "cat >  $bootSyslinux"
echo "$grubCFG" | sshExe $DRBL "cat >  $bootGrub"
echo "$ipxeCFG" | sshExe $DRBL "cat >  $bootIpxe"


}

#Fucntion to create the confnet files for clients

createConfnet () {


confnetFile="$CONFNETDIR/"$hwaddr"_confnet.bat"

confnetContent="
REM
REM This script do final configuration
REM Scope 1 : change ip address
REM Scope 2 : set interface name
REM Scope 3 : Eventually activate windows
REM Scope 4 : Separate exe files from all the rest per release



NetSh Advfirewall set allprofiles state off
NetSh winhttp reset proxy
reg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v HideSCAHealth /t REG_DWORD /d 0x1 /f
"
if [[ $radmin -eq 1  && $cz -eq 1 ]] ; then
confnetContent="$confnetContent
%windir%\\SysWOW64\\rserver30\\Rserver3.exe /stop
%windir%\\SysWOW64\\rserver30\\Rserver3.exe /start

"
fi
confnetContent="$confnetContent
sc config lmhosts start= auto
sc start lmhosts
sc config wscsvc start= disabled

if exist C:\\Nagravision\\delivery (
cd C:\\Nagravision\\delivery
for  /D  %%d IN (C:\\Nagravision\\delivery\\*) DO (
				if exist %%d (
                echo \"Creating %%d.GUI **********************\"

                mkdir %%d.GUI

                                cd %%d
                                FOR  /R  %%e IN (*.exe) DO (
                                echo \"Moving %%e in %%d.GUI **********************\"
                                move /Y %%e %%d.GUI
				echo \"Installing %%e\"
                                call %%e /S /W /F

                                )
								)

                )

)
"
  if [[ ! -z "$productKey" ]]; then

confnetContent="$confnetContent
echo \"Activating Windows..........\"
net time \\\\mdt01 /SET /YES
cscript /b %windir%\\system32\\slmgr.vbs -upk
ping 9.1.1.1 -n 1 -w 10000 > nul
cscript /b %windir%\\system32\\slmgr.vbs -ipk $productKey
ping 9.1.1.1 -n 1 -w 10000 > nul
cscript /b %windir%\\system32\\slmgr.vbs -ato
ping 9.1.1.1 -n 1 -w 60000 > nul
"

fi

confnetContent="$confnetContent
:: This section is commented because is not working as it should (os hangs at startup)
:: Run windows updates again......
::	net use X: \\\\10.0.205.203\\Images

::        cd /D X:\\MDT\\Scripts\\wsusoffline\\client\\cmd
        :: Call DoUpdate to update the os
::       call DoUpdate.cmd


echo \"About to set interface name and ip address **********************\"

REM This is done in cs.ini
REM netsh interface set interface name = \"Local Area Connection\" newname = \"CTRL\"
"
if [[ ! -z "$ipaddress" ]] && [[ ! -z "$netmask" ]]; then

confnetContent="$confnetContent
wmic nicconfig where MACAddress=\"$hwaddr\" call EnableStatic (\"$ipaddress\"), (\"$netmask\")
"
fi

if [[ ! -z "$gateway" ]]; then
confnetContent="$confnetContent
wmic nicconfig where MACAddress=\"$hwaddr\" call SetGateways (\"$gateway\"), (\"1\")
"
fi

confnetContent="$confnetContent
tzutil /s \"$wintz\"
ipconfig /flushdns

if exist C:\\bginfo (
echo \"About to update its background infos **********************\"

CALL C:\\bginfo\\bginfo.bat
)
"
if [[ ! -z $salesOrder ]]; then
data=$(date)
confnetContent="$confnetContent
echo Installation number: $salesOrder performed on $data > C:\Windows\syp_log
"
fi
confnetContent="$confnetContent
net user administrator Superuser
net user operator Customer


REM remove the autologon proprierties

reg add \"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\" /v AutoAdminLogon /d 0 /f
reg add \"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\" /v DefaultUserName /d \"\" /f
reg add \"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\" /v DefaultDomainName /d \"\" /f
REM reg add \"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\" /v AutoLogonCount /d &H00000000


shutdown -r -t 30
DEL \"%~f0\"
"
#Write the confnet file on server
ACTION=$(echo "$confnetContent" > $confnetFile)
echo "$confnetContent" | sshExe $DRBL "cat >  $confnetFile"

if [[ $? -ne 0 ]] 
then
log WARN "Cannot write confnet file for final customisation. Reason: $ACTION"

  
fi

}


# Scp  function
scpExe () {
# $1 client ip
#
# $2 source file
# $3 target file
# No password required because we run on drbl server

sshpass -p Superuser scp -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t $2 root@$1:$3
if [[ $? -ne 0 ]]
then
log ERROR "Cannot scp $2 file to client, every further action will be not possible so I exit right now!"
exit 299
fi


}

sshExe() {
# $1 client ip
#
# $2 command or function
# No password required because we run on drbl server
sshpass -p Superuser ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t root@$1 " $2"
if [[ $? -ne 0 ]]
then
log ERROR "Execution Error! May be ssh connection problem or execution of command'$2' issue. I will exit now."
log ERROR "The command was: ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t root@$1 \" $2\""
exit 299
fi
}



# check IP address function
valid_ip() {
ERROR=0
    oldIFS=$IFS
    IFS=.
    set -f
    set -- $1
    if [ $# -eq 4 ]
    then
      for seg
      do
        case $seg in
            ""|*[!0-9]*) ERROR=1;break ;; ## Segment empty or non-numeric char
            *) [ $seg -gt 255 ] && ERROR=2 ;;
        esac
      done
    else
      ERROR=3 ## Not 4 segments
    fi
    IFS=$oldIFS
    set +f
    return $ERROR
}

# Function to configure IBM servers

checkIBM () {
check=$(dmidecode -s system-manufacturer | grep  IBM ||  echo 'NOK')
log WARN "Check IBM result: $check"
if [[  "$check" != *"NOK"* ]]; then
echo "OK"
else
echo "NOK"
fi


}

setIMM () {

IMM_hostname="IMM$hostname"
IMM_ip=$iloipaddress
IMM_mask=$ilonetmask
IMM_gw=$gateway
log INFO "Settings for IMM are: $IMM_ip $IMM_mask $IMM_gw $IMM_hostname"
log INFO "Launching the command /usr/sbin/set_imm.sh $IMM_ip $IMM_mask $IMM_gw $IMM_hostname . It takes some time to complete"
Set=$(/usr/sbin/set_imm.sh $IMM_ip $IMM_mask $IMM_gw $IMM_hostname)
log INFO "Finished to set IMM values"
}



#function to check if EliteDesk desktop machine

checkEliteDesk () {
check=$(dmidecode -s system-product-name | grep  EliteDesk ||   echo 'NOK')
log WARN "Check EliteDesk result: $check"
if [[  "$check" != *"NOK"* ]]; then
echo "OK"
else
echo "NOK"
fi
}


#Functions to configure proliant servers 

checkProliant () {

#check if proliant
check=$(dmidecode -s system-product-name | grep  ProLiant ||  echo 'NOK')
log WARN "Check Proliant result: $check"
if [[  "$check" != *"NOK"* ]]; then
echo "OK"
else
echo "NOK"
fi

}



setILOMIRROR () {
# Settings for ILO and mirror of disks
#mirroring is done if number of disk=2 and logical disk = 0
ILO_hostname="ILO$hostname"
ILO_pwd="Superuser"
ILO_ip=$iloipaddress
ILO_mask=$ilonetmask
ILO_gw=$gateway
log INFO "Settings for ilo are: $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname"
log INFO "Launching the command /usr/sbin/set_ilo_mirror.sh $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname and mirroring eventually the disks"
Set=$(set_ilo_mirror.sh $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname)
log INFO "Results for script: $Set"
}




#Function to clone winpe on HDD to solve ipxe illegal opcode on Proliant servers
clonePEonHDD () {
log WARN "Cloning $WINPE on sda avoiding so the illegal opcode issue on certain machines"
/usr/sbin/ocs-sr -l en_US.UTF-8  --nogui --batch -g auto -e1 auto -e2 -r -icds --clone-hidden-data -p reboot restoredisk $WINPE sda  > /dev/null 2>&1 
if [ $? -ne 0 ]; then
log ERROR "Cloning ERROR. I exit right now. You can check errors directly on client ($clientIP)"
exit 199
fi
}

#cloenzilla wrapper
clonezillaWrapper () {

log WARN "Cloning the image $taskID on $clientIP"
/usr/sbin/ocs-sr -l en_US.UTF-8  --nogui --batch -g auto -e1 auto -e2 -r -icds --clone-hidden-data -p command restoredisk $taskID sda  > /dev/null 2>&1
if [ $? -eq 0 ]; then
log WARN "Cloning appeared successfull but i have no control on it. I'm going to next action"

log INFO "Copying necessary files......"
mountSystem
copyFiles 
if [[ ! -z "$release" ]]; then
log INFO "Downloading release. It can takes some time"
downloadRelease  
fi
#Clean remote comman table
perl /usr/local/bin/removeCommand.pl
/sbin/reboot
else
log ERROR "Cloning ERROR. I exit right now. You can check errors directly on client (ssh root@$clientIP)"
exit 199
fi


}



mountSystem () {
target="/mnt/windows/Nagravision/delivery"
PARTITION="/dev/sda2"
if  mount | grep -q $PARTITION  > /dev/null 2>&1;
then
log WARN  "Partition still mounted, unmounting........"
umount $PARTITION
fi
log WARN  "mounting ${PARTITION} on /mnt/windows"
mkdir -p /mnt/windows; mount -t ntfs $PARTITION /mnt/windows; mkdir -p $target
}

copyFiles () {

hwaddr=$(echo $MAC | tr 'a-z' 'A-Z')
confnetFile="/var/www/Confnet/"$hwaddr"_confnet.bat"

target="/mnt/windows/Nagravision/delivery"
log INFO "Copying necessary files"
scpExe $DRBL "$CONFNETDIR/$confnetfile" "/mnt/windows/confnet.bat"
cp $BASE/softwindows/dhcp.vbs $target; cp $BASE/MDT/Scripts/registry.reg $target; cp -r $BASE/softwindows/bginfo /mnt/windows/; cp -r $BASE/Nagravision/* /mnt/windows/Nagravision/; mkdir -p /mnt/windows/Windows/Setup/Scripts;
cat << EOF > /mnt/windows/Windows/Setup/Scripts/Run_once.cmd
@ech0 off
call C:\\confnet.bat
del Run_once.cmd
EOF


}

downloadRelease () {
target="/mnt/windows/Nagravision/delivery"
       for SOURCE in $release; do
              if [[  "$SOURCE" != " " ]]; then
                     SOURCE=$(echo $SOURCE | sed 's"#"/"g')
                     SOURCE_path=$(find /packager/delivery/Customers/ -mindepth 2 -maxdepth 3 -type d -name $SOURCE)
		     log INFO "Copying $SOURCE_path on $target ......................."
                     rsync -va --progress --exclude 'TL*' $SOURCE_path $target 
	      fi
       done
cp $BASE/install.bat $target/install.bat
}

LINUX_system () {
        NUMPROC=$(grep -c "physical id" </proc/cpuinfo | sort | uniq)
        MACHSERIAL=$(dmidecode -s system-serial-number | grep -v '#')
        MANUFACTURER=$(dmidecode -s system-manufacturer | grep -v '#')
        NETCOUNT=$(/usr/share/drbl/bin/get-nic-devs | wc -l)
        MODEL=$(dmidecode -s system-product-name | grep -v '#')
        RAM_tot=$(grep MemTotal /proc/meminfo | cut -d':' -f2 | cut -d 'k' -f1)
        RAM_tot=$(echo "$RAM_tot" | xargs)
        RAM_tot=$(( RAM_tot / 1000 ))

        NUMPROC=$(echo "$NUMPROC" | xargs )
        MACHSERIAL=$(echo "$MACHSERIAL" | xargs)
        MANUFACTURER=$(echo "$MANUFACTURER" | xargs)
        MODEL=$(echo "$MODEL" | xargs)
        DISKCOUNT=$(lsblk -o NAME -i -d -n -e 1,11 | wc -l)
}



findCustACR () {
if [ -z $customer ]; then
log INFO "Getting customer name from Sharepoint"

#check in progress page
page="$(wget -qO -   http://sysprod:W117JnAa@sharepoint.hq.k.grp/sites/salesandops/sysprod/Lists/Projects/In%20Progress.aspx)"

array=($page)

    cnt=0
for el in "${array[@]}"; do
        [[ $el == *"$salesOrder"* ]]  && break
        ((++cnt))
done
if [ $cnt -eq 0 ]; then
#This means that the order is not yet in progress, so may be is scheduled right now
        page="$(wget -qO -   http://sysprod:W117JnAa@sharepoint.hq.k.grp/sites/salesandops/sysprod/Lists/Projects/Scheduled.aspx)"
        array=($page)
        for el in "${array[@]}"; do
                [[ $el == *"$salesOrder"* ]]  && break
        done
fi
#Get following substring in array (is the hyphen)
((++cnt))
string2=${array[$cnt]}
#Get following substring in array (is the cust ACR)
((++cnt))
string3=$(echo ${array[$cnt]} | awk -F "<" '{print $1}')

ACR=$string3
else
ACR=$customer
fi
}

findACRforRelease () {

# find path of given release
# return customer ACR if found
# return nothing if cannot find



RELEASE=$1
# try to find
RES=$(find /packager/delivery/Customers -mindepth 1 -maxdepth 2 -type d -name $RELEASE)
ACR=$(echo $RES | cut -d "/" -f 5)
if [[  -z ${ACR// } ]] || [[ -z ${ACR//$'\n'/} ]] ; then
	findCustACR
else
	log INFO "Customer ACR found : $ACR"
fi


}

sendEmailHOTLINE () {
log INFO "Sending email to HOTLINE about radmin Status"

[[  -z $ACR ]] && findCustACR

# compose the title string (retunr vars from the function above)

title="$salesOrder $string2 $string3"

from='sysprod_sw_delivery@nagra.com'
mailto='hotline@nagra.com'
#mailto='andrea.cristalli@nagra.com'
cc='SystemProduction@nagra.com'
subject="[ $title ] [ $hostname ]  Radmin Activation "
body='<body><p style="display: inline-block;
        outline: none;
        cursor: pointer;
        text-align: left;
        text-decoration: none;
        font: 14px/100% Arial, Helvetica, sans-serif;
        padding: .1em 1em .15em;
        -webkit-border-radius: .5em;
        -moz-border-radius: .5em;
        border-radius: .5em;
"
>Hello,<br /><br />
The radmin license has been activated on the following host:
<table style="border:#6495ed solid medium;border-collapse : collapse;width : 80%;outline: none;cursor: pointer;text-align: center;text-decoration: none;font: 14px/100% Arial, Helvetica, sans-serif; padding: .5em 2em .55em;">
<tr><th  colspan="5"style="color : rgb(78, 191, 55);border : #6495ed solid thin;width : 5px;background-color : #d0e3fa;" >Sales Order: '$title'</th></tr>
<tr><th colspan="1" style="color : rgb(78, 191, 55);border : #6495ed solid thin;width : 5px;background-color : #d0e3fa;" >Hostname
</th><th colspan="1" style="color : rgb(78, 191, 55);border : #6495ed solid thin;width : 50%;padding : 5px;background-color : #d0e3fa;" >Ip Address
</th><th colspan="1" style="color : rgb(78, 191, 55);border : #6495ed solid thin;width : 50%;padding : 5px;background-color : #d0e3fa;" >Serial number
</th><th colspan="1" style="color : rgb(78, 191, 55);border : #6495ed solid thin;width : 50%;padding : 5px;background-color : #d0e3fa;" >Image Version
</th><th colspan="1" style="color : rgb(78, 191, 55);border : #6495ed solid thin;width : 50%;padding : 5px;background-color : #d0e3fa;" >Radmin status</th></tr>
<tr><td style="border-style : solid;width : 20em;border : #6495ed solid thin;padding : 5px;text-align : center;background-color : #ffffff;">'$hostname'</td>
<td style="border-style : solid;width : 20em;border : #6495ed solid thin;padding : 5px;text-align : center;background-color : #ffffff;">'$ipaddress'</td>
<td style="border-style : solid;width : 20em;border : #6495ed solid thin;padding : 5px;text-align : center;background-color : #ffffff;">'$MACHSERIAL'</td>
<td style="border-style : solid;width : 20em;border : #6495ed solid thin;padding : 5px;text-align : center;background-color : #ffffff;">'$taskID'</td>
<td style="border-style : solid;width : 20em;border : #6495ed solid thin;padding : 5px;text-align : center;background-color : #ffffff;">Yes</td></tr>
</table><br /><br />Best regards,<br /><br />
Your SysProd Team<br /><br />
This is an automatic report, any feedback welcome at the address SystemProduction[at]nagra.com</p></body></html>';


( 
echo "From: $from"
echo "To: $mailto"
echo "Cc: $cc"
echo "Subject: $subject"
echo "MIME-Version: 1.0"
echo "Content-Type: text/html; charset=ISO-8859-1"
echo "$body"
) | sshExe $DRBL "sendmail -t"

}

if [ $# -eq 0 ]; then
usage
fi

#Actually Get the arguments

while [[ -n $1 ]]; do
    case "$1" in
	-a )
	  wintz="$2" # You may want to check validity of $2
	  ;;
	  -pos )
	  rackPosition="$2" # You may want to check validity of $2
	  ;;
	  -g )
	  gateway="$2"   # You may want to check validity of $2
	  ;;
      -h )
	  hostname="$2"   # You may want to check validity of $2
	  ;;
      -d )
	  domain="$2" 
	  ;;
      -t )
	  taskID="$2"  
	  ;;
	  -ip )
	  ipaddress="$2"  
	  ;;
      -n )
	  netmask="$2" # You may want to check validity of $2
	  ;;
      -p )
	  productKey="$2" # You may want to check validity of $2
	  ;;
	  -r )
	  release="$2" # You may want to check validity of $2
	  ;;
	  -s )
	  salesOrder="$2" # You may want to check validity of $2
	  ;;
	  -iloip )
	  iloipaddress="$2"
	  ;;
	  -ilonm )
	  ilonetmask="$2"
	  ;;
      -radmin )
       radmin="$2"
        ;;
	-cus )
	customer=$2
	;;
	-* | --*)
      usage
      log ERROR "Unknown option $1 $2"
      error_exit "Unknown option $1 $2" ;;
    *)
      ;;
  esac
  shift 2
done


# check the arguments
# Please note that data is not verified
check_args







log INFO "Set defaults value if not specified in command line..."
# Set the defaults values
[[ -z "$wintz" ]] && wintz="Central European Standard Time" 					&& log INFO "Set the time zone to '$wintz'"
[[ -z "$hostname" ]] && hostname="mgt01"							&& log INFO "Set the hostname to '$hostname'"
[[ -z "$domain" ]] && domain="WORKGROUP"							&& log INFO "Set the workgroup to '$domain'"
[[ -z "$ipaddress" ]] && ipaddress="10.0.133.$((RANDOM%=255))"				&& log INFO "Set the ip address to '$ipaddress'"
[[ -z "$netmask" ]] && netmask="255.255.255.0"							&& log INFO "Set the netmask to '$netmask'"
[[ -z "$gateway" ]] && gateway="10.0.133.252"							&& log INFO "Set the gateway to '$gateway'"
[[ -z "$ilohostname" ]] && ilohostname="ILO$hostname"						&& log INFO "Assuming ilo hostname for proliant server equal to '$ilohostname' and IMM hostname for IBM X series equal to IMM$hostname"
[[ -z "$iloipaddress" ]] && iloipaddress="10.0.133.$((RANDOM%=255))"			&& log INFO "Assuming ilo ip address for proliant server equal to '$iloipaddress'"
[[ -z "$ilonetmask" ]] && ilonetmask="255.255.255.0"						&& log INFO "Assuming ilo netmask for proliant server equal to '$ilonetmask'"
[[ -z "$salesOrder" ]] && salesOrder="99999999"							&& log INFO "Set sales order to '$salesOrder'"
[[ -z "$radmin" ]] &&  radmin=0									&& log INFO "Set radmin to 0 (not activate)"
cz=0
[[ ! -d "$MDT/$taskID" ]] && cz=1  

# Synch the time
syncTime


log INFO "Executing the machine inventory"
LINUX_system 
if [[ $radmin -ne 0 ]]; then
        sendEmailHOTLINE
echo "send email is commented"
fi

#Check if the workflow is mdt or clonezilla
if [ $cz -eq 1 ]; then
	#*********************************************	Clonezilla WORKFLOW	***************************************************
	log INFO "Starting Clonezilla WORKFLOW"
	log INFO "Creating the confnet.bat file for further customisation..."
	createConfnet
	# Config proliant servers
	log INFO "Checking if the server is a proliant server...."
	proliant=$(checkProliant)
	if [[ "$proliant" == "OK" ]]; then
		#Set ILO configuration
		setILOMIRROR
	else
		#check if a IBM server
		log INFO "Checking if the server is a IBM server...."
		IBM=$(checkIBM)
		if [[ "$IBM" == "OK" ]]; then
		#Apply raid configuration (mirror template)
		log WARN "Did you set the raid yourself?"
#		setIBMRaid "raid1.ini"	
		fi
	fi
	log INFO "Launching the clonezilla restore in background"
	clonezillaWrapper &
	


else
	#***********************************************	MDT WORKFLOW	****************************************************
	#Append the section to customsettings.ini
	log INFO "Starting MDT WORKFLOW"
	log INFO "Creating CustomSettings.ini section for MDT..."
	append_csini

	#Create the boot files
	log INFO "Creating bootfiles for grub and syslinux based on mac address"
	bootPxe

	# Create the Confnet file
	log INFO "Creating the confnet.bat file for further customisation..."
	createConfnet
#	destroyDisks
	# Config proliant servers
	log INFO "Checking if the server is a proliant server...."
	proliant=$(checkProliant)
	if [[ "$proliant" == "OK" ]]; then
        	#Set ILO configuration
		setILOMIRROR
		#clone WinPE on HDD
#		clonePEonHDD &
		destroyDisks
	else
		#check if a IBM server
        	log INFO "Checking if the server is a IBM server...."
        	IBM=$(checkIBM)
        	if [[ "$IBM" == "OK" ]]; then
        		log WARN "Did you set the raid yourself?"
#               setIBMRaid "raid1.ini"
		setIMM
		else
			#check if HP EliteDesk
#			log INFO "Check if this is a EliteDesk desktop machine....."
#			ELITE=$(checkEliteDesk)
#			if [[ "$ELITE" == "OK" ]]; then
        		#		clonePEonHDD &
			log INFO "This is a standard machine or VM, cleaning the disk(s)"
			destroyDisks
#		fi
		fi
		#the SSH execution is assured in the function
	fi
	# Create the record in dashboard table
	log INFO "Rebooting the client....."
	log INFO "End of Wrapper execution. Next messages comes from MDT"
	#Clean remote comman table
	perl /usr/local/bin/removeCommand.pl
                        /sbin/reboot >/dev/null  2>&1 &
exit 0
fi
# End of file
exit 0
kill $My_Pid
